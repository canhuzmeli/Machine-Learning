import numpy as np
import sys
from scipy.stats import multivariate_normal as mvnorm
In [2]:
datapoints = 2000
dimensions = 8
clusters = 5
In [3]:
def create_data():
    
    x = np.empty([0, dimensions])
    
    for i in range(datapoints):
        
        mean = np.repeat((i%clusters), dimensions)

        #print np.random.multivariate_normal(mean=mean, cov=np.identity(3), size=1).reshape(1,3)
        
        x = np.append(x, np.random.multivariate_normal(mean=mean, cov=np.identity(dimensions), size=1).reshape(1,dimensions), axis=0)
        
    return x
In [4]:
#X = np.genfromtxt(sys.argv[1], delimiter=",")

X = create_data()

n = X[:,0].size

d = X[0,:].size

K = 5

iterations = 2

print n, d, K
2000 8 5
In [5]:
def k_means():
        
    for i in range(n):
            
        cs = np.array([])
        
        for k in range(K):
                
            cs = np.append(cs, np.linalg.norm(X[i] - mu[k])**2)
                
        c[i] = np.argmin(cs)
            
            
    for k in range(K):
        
        nk = np.sum(c == k).astype(np.float32)
        
        print nk
            
        mus = np.empty([0, d])
          
        for i in range(n):
                
            if c[i] == k:
                mus = np.append(mus, X[i].reshape(1,d), axis=0)
                
        if nk > 0:
            mu[k] = (1.0/nk)*np.sum(mus, axis=0)

            
    np.savetxt("centroids-" + str(t+1) + ".csv", mu, delimiter=",")
In [6]:
mu = np.random.rand(K, d)

c = np.zeros(n)
    
for t in range(iterations):
    print k_means()
118.0
128.0
873.0
697.0
184.0
None
377.0
170.0
806.0
387.0
260.0
None
In [7]:
def phi(i, k, pi, xi):
        
    phi_total = np.array([])

    phi = np.array([])

    for j in range(K):

        phi_total = np.append(phi_total, pi[j]*mvnorm.pdf(x=xi, mean=mu[j], cov=Sigma[j]))
            
    return (pi[k]*mvnorm.pdf(x=X[i], mean=mu[k], cov=Sigma[k]))/np.sum(phi_total)
In [8]:
def gmm():

    for k in range(K):
            
        phi_array = np.array([])
        for i in range(n):
            phi_array = np.append(phi_array, phi(i, k, pi, X[i]))

            
        nk = np.array([[0.0]])
        for i in range(n):
            nk += phi_array[i]  
            
        pi[k] = nk/n
            
        mean_sum = np.zeros([1, d])
        for i in range(n):
            mean_sum += (phi_array[i]*X[i]).reshape(1,d)
        mu[k] = (1.0/nk)*mean_sum
                
        cov_sum = np.zeros([1, d, d])
        for i in range(n):
            cov_sum += (phi_array[i]*np.matmul((X[i]-mu[k]).reshape(-1,1), 
                                                     (X[i]-mu[k]).reshape(1,-1))).reshape(1,d,d)
            
            
        Sigma[k] = (1.0/nk)*cov_sum
            
        np.savetxt("Sigma-" + str(k+1) + '-' + str(t+1) + ".csv", Sigma[k], delimiter=",")

    np.savetxt("pi-" + str(t+1) + ".csv", pi, delimiter=",")
    np.savetxt("mu-" + str(t+1) + ".csv", mu, delimiter=",")
In [9]:
pi = np.repeat((1.0/K), 5).reshape(-1, 1)

mu = np.empty([0, d])
    
for i in range(K):
    mu = np.append(mu, np.random.rand(1, d), axis=0)
    
Sigma = np.empty([0, d, d])

for i in range(K):
    Sigma = np.append(Sigma, np.identity(d).reshape(1, d, d), axis=0)

for t in range(iterations):
    gmm()
    
print 'done'
done
In [ ]:

In [ ]:

In [ ]:

In [ ]:

In [ ]:

In [85]:
mean = np.array([[0],[0]]).reshape(-1)

cov = np.array([[4,0],[0,4]])

x = np.array([[0, 0]])

print mvnorm.pdf(x=x, mean=mean, cov=cov)

print my_mvnorm(x, mean, cov)
0.039788735773
[[ 0.03978874]]
In [27]:
a = np.append(np.identity(d).reshape(1,d,d), np.identity(d).reshape(1,d,d), axis=0)

print np.sum(a, axis=0)
[[ 2.  0.  0.]
 [ 0.  2.  0.]
 [ 0.  0.  2.]]
In [5]:
def my_mvnorm(x, mu, Sigma):
    
    x = x.reshape(-1,1)
    
    mu = mu.reshape(-1,1)
    
    p = 1/(np.sqrt(np.linalg.det(2*np.pi*Sigma)))
    
    q = np.exp(-0.5*np.matmul(np.matmul(np.transpose(x-mu),np.linalg.matrix_power(Sigma, -1)),(x-mu)))
    
    return p*q
In [ ]:
np.savetxt("centroids-" + str(iteration) + ".csv", , delimiter="\n")
np.savetxt("pi-" + str(iteration) + ".csv", , delimiter="\n")
np.savetxt("mu-" + str(iteration) + ".csv", , delimiter="\n")
np.savetxt("Sigma-" + str(cluster) + str(iteration) + ".csv", , delimiter="\n")
In [6]:
def mvg(x, mu, Sigma):
    
    np.exp(-0.5*np.transpose(x-mu)*np.linalg.matrix_power(Sigma, -1)*(x-mu))/np.sqrt
In [64]:
def Sum(ind_val, shape, n, axis):
    
    array = np.empty(shape)

    for i2 in range(n):
                
        array = np.append(array, ind_val)

    return np.sum(array, axis=axis)
In [ ]:
def gmm():

    for k in range(K):
            
        phi_array = np.array([])
        for i in range(n):
            phi_array = np.append(phi_array, phi(i, k, pi, X[i]))
            
        #nk_sum = np.array([])
        #for i in range(n):
        #    nk_sum = np.append(nk_sum, phi(i, k, pi, X[i]))
        #nk = np.sum(nk_sum)

        #print nk
            
        nk = np.array([[0.0]])
        for i in range(n):
            nk += phi_array[i]  
        print nk
            
        pi[k] = nk/n

            
        #mean_sum = np.empty([0, d])
        #for i in range(n):
        #    mean_sum = np.append(mean_sum, (phi(i, k, pi, X[i])*X[i]).reshape(1,d), axis=0)
        #mu[k] = (1.0/nk)*np.sum(mean_sum, axis=0)
            
        mean_sum = np.zeros([1, d])
        for i in range(n):
            mean_sum += (phi_array[i]*X[i]).reshape(1,d)
        mu[k] = (1.0/nk)*mean_sum
            
            
        #cov_sum = np.empty([0, d, d])
        #for i in range(n):
        #    cov_sum = np.append(cov_sum, (phi(i,k, 
        #                                      pi, X[i])*np.matmul((X[i]-mu[k]).reshape(-1,1), 
        #                                           (X[i]-mu[k]).reshape(1,-1))).reshape(1,d,d), axis=0)
            
            
        #Sigma[k] = (1.0/nk)*np.sum(cov_sum, axis=0)
            
            
        cov_sum = np.zeros([1, d, d])
        for i in range(n):
            cov_sum += (phi_array[i]*np.matmul((X[i]-mu[k]).reshape(-1,1), 
                                                     (X[i]-mu[k]).reshape(1,-1))).reshape(1,d,d)
            
            
        Sigma[k] = (1.0/nk)*cov_sum
            
        np.savetxt("Sigma-" + str(k+1) + '-' + str(t+1) + ".csv", Sigma[k], delimiter=",")

    np.savetxt("pi-" + str(t+1) + ".csv", pi, delimiter=",")
    np.savetxt("mu-" + str(t+1) + ".csv", mu, delimiter=",")